plugins {
    alias(libs.plugins.kotlin.multiplatform)
    alias(libs.plugins.android.kotlin.multiplatform.library)
    alias(libs.plugins.serialization)
}

val baseUrlProvider = provider {
    val isRelease = gradle.startParameter.taskNames.any {
        it.contains("release", ignoreCase = true)
    }
    if (isRelease) {
        "https://pickpickmovie.com"
    } else {
        "http://10.0.2.2:8085"
    }
}

val buildConfigGenerator by tasks.registering(Sync::class) {
    // URL Provider를 텍스트 파일 내용으로 변환합니다.
    val buildConfigFile = baseUrlProvider.map { url ->
        // resources.text.fromString을 사용해 파일 내용을 동적으로 생성합니다.
        resources.text.fromString(
            """
            |// This file is generated by Gradle. Do not edit.
            |package com.dothebestmayb.pickpickmovie.shared
            |
            |object BuildConfig {
            |    const val BASE_URL = "$url"
            |}
            |
            """.trimMargin()
        )
    }
    from(buildConfigFile) {
        rename { "BuildConfig.kt" }
        into("com/dothebestmayb/pickpickmovie/shared/")
    }

    // 최종적으로 파일이 생성될 목적지 폴더를 지정합니다.
    into(layout.buildDirectory.dir("generated-src/kotlin/"))
}

kotlin {

    // Target declarations - add or remove as needed below. These define
    // which platforms this KMP module supports.
    // See: https://kotlinlang.org/docs/multiplatform-discover-project.html#targets
    androidLibrary {
        namespace = "com.dothebestmayb.pickpickmovie.shared"
        compileSdk = 35
        minSdk = 28

        withHostTestBuilder {
        }

        withDeviceTestBuilder {
            sourceSetTreeName = "test"
        }.configure {
            instrumentationRunner = "androidx.test.runner.AndroidJUnitRunner"
        }
    }

    // For iOS targets, this is also where you should
    // configure native binary output. For more information, see:
    // https://kotlinlang.org/docs/multiplatform-build-native-binaries.html#build-xcframeworks

    // A step-by-step guide on how to include this library in an XCode
    // project can be found here:
    // https://developer.android.com/kotlin/multiplatform/migrate
    val xcfName = "sharedKit"

    iosX64 {
        binaries.framework {
            baseName = xcfName
        }
    }

    iosArm64 {
        binaries.framework {
            baseName = xcfName
        }
    }

    iosSimulatorArm64 {
        binaries.framework {
            baseName = xcfName
        }
    }

    // Source set declarations.
    // Declaring a target automatically creates a source set with the same name. By default, the
    // Kotlin Gradle Plugin creates additional source sets that depend on each other, since it is
    // common to share sources between related targets.
    // See: https://kotlinlang.org/docs/multiplatform-hierarchy.html
    sourceSets {
        commonMain {
            kotlin {
                srcDirs(buildConfigGenerator.map {
                    it.destinationDir
                })
            }
            dependencies {
                implementation(libs.kotlin.stdlib)
                implementation(libs.kotlinx.serialization.json)

                implementation(libs.ktor.client.core)
                implementation(libs.ktor.client.content.negotiation)
                implementation(libs.ktor.serialization.kotlinx.json)
                implementation(libs.ktor.client.logging)
                implementation(libs.ktor.client.auth)

                implementation(libs.koin.core)

                implementation(libs.multiplatform.settings)
                implementation(libs.multiplatform.settings.serialization)

                implementation(libs.compose.components.resources)
            }
        }

        commonTest {
            dependencies {
                implementation(libs.kotlin.test)
                implementation(libs.junit)
            }
        }

        androidMain {
            dependencies {
                // Add Android-specific dependencies here. Note that this source set depends on
                // commonMain by default and will correctly pull the Android artifacts of any KMP
                // dependencies declared in commonMain.
                implementation(libs.okhttp3.logging.interceptor)
                implementation(libs.ktor.client.okhttp)

                implementation(libs.koin.androidx.compose)

                implementation(libs.timber)

                implementation(libs.androidx.security.crptyo.ktx)
            }
        }

        getByName("androidDeviceTest") {
            dependencies {
                implementation(libs.androidx.runner)
                implementation(libs.androidx.core)
                implementation(libs.androidx.junit)
            }
        }

        iosMain {
            dependencies {
                // Add iOS-specific dependencies here. This a source set created by Kotlin Gradle
                // Plugin (KGP) that each specific iOS target (e.g., iosX64) depends on as
                // part of KMP’s default source set hierarchy. Note that this source set depends
                // on common by default and will correctly pull the iOS artifacts of any
                // KMP dependencies declared in commonMain.
                implementation(libs.ktor.client.darwin)
            }
        }
    }
}