import org.jetbrains.kotlin.gradle.tasks.KotlinCompile

plugins {
    alias(libs.plugins.kotlin.multiplatform)
    alias(libs.plugins.android.application)
    alias(libs.plugins.compose.multiplatform)
    alias(libs.plugins.kotlin.compose)
    alias(libs.plugins.ksp)
    alias(libs.plugins.serialization)
}

val baseUrlProvider = provider {
    val taskNames = gradle.startParameter.taskNames
    val isRelease = taskNames.any { it.contains("release", ignoreCase = true) }

    val isIosBuild = taskNames.any {
        it.contains("ios", ignoreCase = true) ||
                it.contains("xcode", ignoreCase = true) ||
                it.contains("embed", ignoreCase = true)
    }

    if (isRelease) {
        "https://pickpickmovie.com"
    } else {
        if (isIosBuild) {
            "http://localhost:8085"
        } else {
            "http://10.0.2.2:8085"
        }
    }
}

val buildConfigGenerator by tasks.registering(Sync::class) {
    // URL Provider를 텍스트 파일 내용으로 변환합니다.
    val buildConfigFile = baseUrlProvider.map { url ->
        // resources.text.fromString을 사용해 파일 내용을 동적으로 생성합니다.
        resources.text.fromString(
            """
            |// This file is generated by Gradle. Do not edit.
            |package com.dothebestmayb.pickpickmovie.composeApp
            |
            |object BuildConfig {
            |    const val BASE_URL = "$url"
            |}
            |
            """.trimMargin()
        )
    }
    from(buildConfigFile) {
        rename { "BuildConfig.kt" }
        into("com/dothebestmayb/pickpickmovie/composeApp/")
    }

    // 최종적으로 파일이 생성될 목적지 폴더를 지정합니다.
    into(layout.buildDirectory.dir("generated-src/kotlin/"))
}

kotlin {
    androidTarget()

    // For iOS targets, this is also where you should
    // configure native binary output. For more information, see:
    // https://kotlinlang.org/docs/multiplatform-build-native-binaries.html#build-xcframeworks

    // A step-by-step guide on how to include this library in an XCode
    // project can be found here:
    // https://developer.android.com/kotlin/multiplatform/migrate
    listOf(
        iosX64(),
        iosArm64(),
        iosSimulatorArm64()
    ).forEach { iosTarget ->
        iosTarget.binaries.framework {
            baseName = "ComposeApp"
            isStatic = true
        }
    }

    // Source set declarations.
    // Declaring a target automatically creates a source set with the same name. By default, the
    // Kotlin Gradle Plugin creates additional source sets that depend on each other, since it is
    // common to share sources between related targets.
    // See: https://kotlinlang.org/docs/multiplatform-hierarchy.html
    sourceSets {
        commonMain {
            kotlin {
                srcDirs(buildConfigGenerator.map {
                    it.destinationDir
                })
            }
            dependencies {
                implementation(libs.kotlin.stdlib)
                implementation(libs.kotlinx.serialization.json)

                implementation(libs.ktor.client.core)
                implementation(libs.ktor.client.content.negotiation)
                implementation(libs.ktor.serialization.kotlinx.json)
                implementation(libs.ktor.client.logging)
                implementation(libs.ktor.client.auth)

                implementation(libs.koin.core)
                implementation(libs.koin.compose)
                implementation(libs.koin.compose.viewmodel)
                implementation(libs.koin.compose.viewmodel.navigation)

                implementation(libs.multiplatform.settings)
                implementation(libs.multiplatform.settings.serialization)

                implementation(libs.compose.components.resources)
                implementation(libs.lifecycle.viewmodel.compose)
                implementation(libs.navigation.compose)
                implementation(libs.material3)

                implementation(libs.material.icons.extended)
            }
        }

        commonTest {
            dependencies {
                implementation(libs.kotlin.test)
                implementation(libs.junit)
            }
        }

        androidMain {
            dependencies {
                // Add Android-specific dependencies here. Note that this source set depends on
                // commonMain by default and will correctly pull the Android artifacts of any KMP
                // dependencies declared in commonMain.
                implementation(libs.androidx.ui.tooling)
                implementation(libs.androidx.ui.tooling.preview)
                implementation(libs.androidx.core.splashscreen)

                implementation(libs.okhttp3.logging.interceptor)
                implementation(libs.ktor.client.okhttp)

                implementation(libs.timber)

                implementation(libs.androidx.security.crptyo.ktx)
            }
        }

        iosMain {
            dependencies {
                // Add iOS-specific dependencies here. This a source set created by Kotlin Gradle
                // Plugin (KGP) that each specific iOS target (e.g., iosX64) depends on as
                // part of KMP’s default source set hierarchy. Note that this source set depends
                // on common by default and will correctly pull the iOS artifacts of any
                // KMP dependencies declared in commonMain.
                implementation(libs.ktor.client.darwin)
            }
        }
    }
}

compose.resources {
    publicResClass = true
    generateResClass = always
}

android {
    namespace = "com.dothebestmayb.pickpickmovie"
    compileSdk = 35

    defaultConfig {
        applicationId = "com.dothebestmayb.pickpickmovie"
        minSdk = 28
        targetSdk = 35
        versionCode = 1
        versionName = "1.0"

        testInstrumentationRunner = "androidx.test.runner.AndroidJUnitRunner"
    }

    sourceSets["main"].manifest.srcFile("src/androidMain/AndroidManifest.xml")
    sourceSets["main"].res.srcDirs("src/androidMain/res")

    buildTypes {
        release {
            isMinifyEnabled = true
            proguardFiles(
                getDefaultProguardFile("proguard-android-optimize.txt"),
                "proguard-rules.pro"
            )
        }
    }

    compileOptions {
        sourceCompatibility = JavaVersion.VERSION_21
        targetCompatibility = JavaVersion.VERSION_21
    }

    buildFeatures {
        compose = true
        buildConfig = true
    }

    applicationVariants.all {
        val variantName = name
        sourceSets {
            getByName("main") {
                java.srcDir(File("build/generated/ksp/$variantName/kotlin"))
            }
        }
    }
    ksp {
        arg("KOIN_CONFIG_CHECK", "true")
    }
}

// Gradle이 컴파일 전에 반드시 이 태스크를 실행하도록 설정
tasks.withType<KotlinCompile>().configureEach {
    dependsOn(buildConfigGenerator)
}
